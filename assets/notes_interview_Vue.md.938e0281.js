import{_ as e,c as t,o as r,b as a}from"./app.01453473.js";const f=JSON.parse('{"title":"收集点面试题(Vue篇)","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. ==Vue3 面试题：为什么组件实例只可以在 setup 方法中获取，设计原理是什么？==","slug":"_1-vue3-面试题-为什么组件实例只可以在-setup-方法中获取-设计原理是什么","link":"#_1-vue3-面试题-为什么组件实例只可以在-setup-方法中获取-设计原理是什么","children":[]},{"level":2,"title":"2. ==Vue 和 React 的区别==","slug":"_2-vue-和-react-的区别","link":"#_2-vue-和-react-的区别","children":[]},{"level":2,"title":"3. ==使用 Object.defineProperty 来进行数据劫持有什么缺点==","slug":"_3-使用-object-defineproperty-来进行数据劫持有什么缺点","link":"#_3-使用-object-defineproperty-来进行数据劫持有什么缺点","children":[]}],"relativePath":"notes/interview/Vue.md","lastUpdated":1678380106000}'),n={name:"notes/interview/Vue.md"},o=a('<h1 id="收集点面试题-vue篇" tabindex="-1">收集点面试题(Vue篇) <a class="header-anchor" href="#收集点面试题-vue篇" aria-hidden="true">#</a></h1><hr><h2 id="_1-vue3-面试题-为什么组件实例只可以在-setup-方法中获取-设计原理是什么" tabindex="-1">1. ==Vue3 面试题：为什么组件实例只可以在 setup 方法中获取，设计原理是什么？== <a class="header-anchor" href="#_1-vue3-面试题-为什么组件实例只可以在-setup-方法中获取-设计原理是什么" aria-hidden="true">#</a></h2><p>在运行组件的 setup 方法<strong>之前</strong>，会把当前运行的组件实例设置在一个全局的变量中：<strong>currentInstance</strong>，运行 setup 方法结束之后就会把当前的全局组件实例变量 currentInstance <strong>设置为空</strong>。所以组件实例只可以在 setup 方法中获取。</p><h2 id="_2-vue-和-react-的区别" tabindex="-1">2. ==Vue 和 React 的区别== <a class="header-anchor" href="#_2-vue-和-react-的区别" aria-hidden="true">#</a></h2><h2 id="_3-使用-object-defineproperty-来进行数据劫持有什么缺点" tabindex="-1">3. ==使用 Object.defineProperty 来进行数据劫持有什么缺点== <a class="header-anchor" href="#_3-使用-object-defineproperty-来进行数据劫持有什么缺点" aria-hidden="true">#</a></h2><ol><li>第一是对象的属性添加删除变化无法被监听到，因为一开始遍历对象并没有这些属性，所以必须使用 <code>Vue.$set</code> 和 <code>Vue.$delete</code> 才能为后来变更的属性添加上响应式。</li><li><code>defineProperty</code> 实现数据劫持的原理主要是对某个属性的 getter 和 setter 操作进行拦截，这就导致想要监听整个对象的属性变化需要递归遍历，性能开销大。</li><li><code>defineProperty</code> 可以监视数组下标，但是需要遍历整个数组，这样的性能开销非常大，并且用户这样操作的次数也不多。</li></ol>',7),i=[o];function c(d,s,u,l,_,p){return r(),t("div",null,i)}const v=e(n,[["render",c]]);export{f as __pageData,v as default};
